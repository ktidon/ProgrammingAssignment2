makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix(matrix(1:4, 2\))
makeCacheMatrix(matrix(1:4, 2))
makeCacheMatrix(matrix(1:4, 2))
?list
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
x<-matrix(1:12, nrow =3, ncol = 4)
x
y<-cachesolve(x)
y<-makeCacheMatrix(x)
y
cachesolve(y)
cachesolve(x)
cacheSolve(y)
x
y
x
x<-matrix(1:9, nrow =3, ncol = 3)
x
cacheSolve(x)
y<-makeCacheMatrix(x)
y
cacheSolve(y)
x
v<-matrix(1:9, nrow =3, ncol = 3)
v
makeCacheMatrix(v)
v
b
b<-makeCacheMatrix(v)
b
b$get()
b$getInverse()
cacheSolve(b)
v<-matrix(1:4, nrow =2, ncol = 2)
b<-makeCacheMatrix(v)
b
v
b$get()
v
v$get()
b$getInverse()
cacheSolve(b)
b$getInverse()
cacheSolve(b)
b$getInverse()
?is.null
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function(){
x
}
setInverse <- function(inverseMatrix){
inverse <<- inverseMatrix
}
getInverse <- function() {
inverse
}
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if (!is.null(inverse)) {
message("Retrieving cached data...")
return(inverse)
}
Matrix <- x$get()
inverse <- solve(Matrix, ...)
x$setInverse(inverse)
inverse
}
v
b
v
b<-makeCacheMatrix(v)
b
cacheSolve(b)
cacheSolve(b)
View(b)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function(){
x
}
setInverse <- function(inverseMatrix){
inverse <<- inverseMatrix
}
getInverse <- function() {
inverse
}
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if (!is.null(inverse)) {
message("Retrieving cached data...")
return(inverse)
}
Matrix <- x$get()
inverse <- solve(Matrix, ...)
x$setInverse(inverse)
inverse
}
d
solve(v)
d<- matrix(c(1,2,3,3,2,1,2,1,3) nrow = 3, ncol = 3)
d<- matrix(c(1,2,3,3,2,1,2,1,3) nrow = 3, ncol = 3))
d <- matrix(c(1,2,3,3,2,1,2,1,3) nrow = 3, ncol = 3))
d <- matrix( c(1,2,3,3,2,1,2,1,3), nrow = 3, ncol = 3))
d <- matrix( c(1,2,3,3,2,1,2,1,3), nrow = 3, ncol = 3)
d
solve (d)
d %% solve(d)
solve(solve(d))
v
solve(solve(v))
solve(v)
v %% solve(v)
?%%
v
d
cacheSolve(d)
is,atomic(d)
is.atomic(d)
is.atomic(v)
c
v
f<-makeCacheMatrix(d)
f
cacheSolve(f)
cacheSolve(f)
cacheSolve(cacheSolve(f))
cacheSolve(cacheSolve(f))
cacheSolve(f)
solve(f)
solve(d)
